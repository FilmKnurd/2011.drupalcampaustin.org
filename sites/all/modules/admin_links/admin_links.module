<?php
// $Id: admin_links.module,v 1.1.2.14 2009/06/27 20:04:41 davereid Exp $

/**
 * @file
 * Adds edit and delete links to node lists, and adds support for the
 * Universal Edit Button.
 */

/**
 * Implementation of hook_menu().
 */
function admin_links_menu() {
  $items['admin/settings/admin-links'] = array(
    'title' => 'Admin links',
    'description' => 'Settings for administration links in node lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_links_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'admin_links.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Change node delete menu callback to an accessible tab on the node page.
 */
function admin_links_menu_alter(&$callbacks) {
  $callbacks['node/%node/delete']['type'] = MENU_LOCAL_TASK;
  $callbacks['node/%node/delete']['weight'] = 2;
}

/**
 * Implementation of hook_link().
 */
function admin_links_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  $destination = drupal_get_destination();

  if ($type == 'node') {
    if (!admin_links_is_node_page($node->nid)) {
      // Move the node local tasks to links when getting links not on the current node page.
      $local_tasks = admin_links_get_local_tasks('node/' . $node->nid, array('node', $node->nid));
      foreach ($local_tasks as $local_task) {
        // Sanitize the path to a string that can be used as a class.
        $link_key = 'admin_links_' . preg_replace('/\W+/m', '_', $local_task['path']);
        $links[$link_key] = array(
          'title' => $local_task['title'],
          'href' => $local_task['href'],
          'query' => $destination,
        );
        $links[$link_key] += $local_task['localized_options'];
      }
    }
    if (admin_links_var('link_new') && user_access('create ' . $node->type . ' content')) {
      $links['admin_links_new'] = array(
        'title' => t('New @type', array('@type' => drupal_strtolower(node_get_types('name', $node)))),
        'href' => 'node/add/' . str_replace('_', '-', $node->type),
        'query' => $destination,
      );
    }
    if (admin_links_is_node_page($node->nid) && admin_links_var('universaledit') && node_access('update', $node)) {
      drupal_add_link(array(
        'rel' => 'alternate',
        'type' => 'application/x-wiki',
        'title' => t('Edit this page'),
        'href' => url('node/' . $node->nid . '/edit', array('absolute' => TRUE)),
      ));
    }
  }

  return $links;
}

/**
 * Fetches a list of the immediate local tasks for a specific Drupal path.
 *
 * @see menu_local_tasks()
 */
function admin_links_get_local_tasks($path, $map = array()) {
  static $local_tasks = array();
  static $router_items = array();
  static $excludes;

  $path_item = menu_get_item($path);

  if (!isset($excludes)) {
    $excludes = admin_links_var('exclude_links');
    $excludes = preg_quote($excludes, '#');
    $excludes = preg_replace(array('/\\\\\*/', '/[\r\n]+/'), array('.*', '|'), $excludes);
    $excludes = '#node/%/(' . $excludes . ')#i';
  }

  if (!isset($router_items[$path_item['tab_root']])) {
    $router_items[$path_item['tab_root']] = array();
    $query = db_query("SELECT * FROM {menu_router} WHERE tab_root = '%s' AND path <> '%s' ORDER BY weight, title", $path_item['tab_root'], $path_item['path']);
    while ($item = db_fetch_array($query)) {
      if (!preg_match($excludes, $item['path'])) {
        // Exclude the links before any furthur processing.
        $router_items[$path_item['tab_root']][] = $item;
      }
    }
  }

  if (!isset($local_tasks[$path])) {
    $local_tasks[$path] = array();
    foreach ($router_items[$path_item['tab_root']] as $item) {
      _menu_translate($item, $map, TRUE);
      if ($item['access']) {
        // Merge some default options for l() to be used later.
        $item['localized_options'] += array(
          //'query' => drupal_get_destination(),
          'attributes' => array(),
        );
        $item['localized_options']['attributes'] += array(
          'title' => $item['description'] ? $item['description'] : $item['title'],
        );
        $local_tasks[$path][] = $item;
      }
    }
  }

  return $local_tasks[$path];
}

/**
 * Checks if the current page is a node page.
 *
 * @param
 *   An optional node ID to check if the current page is a specific node.
 * @return
 *   TRUE if this is a node page, or FALSE otherwise.
 */
function admin_links_is_node_page($nid = FALSE) {
  static $is_node_page = array();
  if (!isset($is_node_page[$nid])) {
    $is_node_page[$nid] = preg_match('%node/' . ($nid ? $nid : '\d+') . '%', $_GET['q']);
  }
  return $is_node_page[$nid];
}

/**
 * Internal default variables for admin_links_var().
 */
function admin_links_variables() {
  return array(
    'admin_links_exclude_links' => implode(PHP_EOL, array('devel/*', 'view')),
    'admin_links_universaledit' => 0,
    'admin_links_link_new' => 0,
    // Removed variables:
    'admin_links_edit' => NULL,
    'admin_links_delete' => NULL,
  );
}

/**
 * Internal implementation of variable_get().
 */
function admin_links_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = admin_links_variables();
  }

  $name = 'admin_links_' . $name;

  // @todo Remove when I stop making spelling errors in variable names.
  if (!isset($defaults[$name])) {
    trigger_error(t('Default variable for %variable not found.', array('%variable' => $name)));
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}

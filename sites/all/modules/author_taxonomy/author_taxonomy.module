<?php
// $Id: author_taxonomy.module,v 1.3.2.9 2009/03/17 18:05:49 robbiesternenberg Exp $

/**
 * @file
 * Identifies authors using terms from a vocabulary.
 *
 * This module supports displaying multiple authors per node with
 * fully themable output.
 */


/**
 * Implementation of hook_menu().
 */
function author_taxonomy_menu() {
  $items = array();

  $items['admin/settings/author_taxonomy'] = array(
    'title' => 'Author taxonomy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('author_taxonomy_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Change settings for Author taxonomy.',
  );
  
  $items['admin/settings/author_taxonomy/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/settings/author_taxonomy/list_links'] = array(
    'title' => 'List links',
    'page callback' => 'author_taxonomy_list_links',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/author_taxonomy',
  );
  
  $items['admin/settings/author_taxonomy/delete'] = array(
    'title' => 'Delete links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('author_taxonomy_delete_links'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/author_taxonomy/autocomplete'] = array(
    'page callback' => 'author_taxonomy_autocomplete',
    //'page arguments' => array('author_taxonomy_delete_links'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function author_taxonomy_delete_links() {
  if (arg(4)) {
    $tid = arg(4);
    $term = taxonomy_get_term($tid);
    $form = array();
    
    $form['tid'] = array('#type' => 'value',
      '#value' => $tid,
    );
  
    return confirm_form(
              $form,
              t('Are you sure you want to delete the link to term %title?', array('%title' => $term->name)),
              'admin/settings/author_taxonomy/list_links',
              t('This action cannot be undone.'),
              t('Delete'),
              t('Cancel')
            );
  } else {
    drupal_goto('admin/settings/author_taxonomy/list_links');
  }
}

function author_taxonomy_delete_links_submit($form, &$form_state) {
  $term = taxonomy_get_term($form_state['values']['tid']);
  
  db_query('DELETE FROM {author_taxonomy_term_link} WHERE tid = %d', $term->tid);
  drupal_set_message(t('Deleted link to term %name.', array('%name' => $term->name)));
  $form_state['redirect'] = 'admin/settings/author_taxonomy/list_links';
  
  return;
}


function author_taxonomy_list_links() {
  $header = array(t('Term'), t('User'), array('data' => t('Operations'), 'colspan' => '2'));
  $rows = array();
  $pager_num = 0;
  $sql = 'SELECT * FROM {author_taxonomy_term_link}';
  $output = '';
  
  $result = pager_query($sql, 10, $pager_num, NULL);
    
  while($link = db_fetch_object($result)) {
    $row = array();
    $user = user_load($link->uid);
    $term = taxonomy_get_term($link->tid);
  
    $row[] = check_plain($term->name);
    $row[] = l($user->name, 'user/' . $user->uid, array('title' => t('Go to @author\'s profile page', array('@author' => $user->name))));
    $row[] = l('edit term', 'admin/content/taxonomy/edit/term/' . $term->tid, array('title' => t('edit term')));
    $row[] = l('delete link', 'admin/settings/author_taxonomy/delete/' . $term->tid);
  
    $rows[] = array('data' => $row);
  }
  
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 10, $pager_num);
  return $output;
}


/**
 * Provides the settings options for the module.
 *
 * @return array
 *  The settings form.
 */
function author_taxonomy_admin_settings() {
  $form = array();

  // Get the list of vocabularies
  $vocabs = taxonomy_get_vocabularies();
  if (empty($vocabs)) {
    drupal_set_message(t('You have not yet created any vocabularies. Please <a href="@taxonomy_url">create a vocabulary</a> and return to this page.', array('@taxonomy_url' => url('admin/content/taxonomy/add/vocabulary'))), 'error');
  }
  
  $default_vocab = variable_get('author_taxonomy_vocab', 0);
  if (!$default_vocab) {
    // add default selection in case no vocab is set
    $vocab_options[''] = t('- None selected-');
  }
  
  foreach ($vocabs as $vid => $obj) {
    $vocab_options[$vid] = $obj->name;
  }
  
  // Make list of available date formats
  $date_formats = array(
    'small' => 'Short',
    'medium' => 'Medium',
    'large' => 'Long',
    'custom' => 'Custom (below)',
  );

  // Drop-down box to choose author vocabulary
  $form['author_taxonomy_vocab'] = array(
    '#type' => 'select',
    '#title' => t('Author taxonomy'),
    '#options' => $vocab_options,
    '#default_value' => $default_vocab,
    '#description' => t('The taxonomy to use for content authors.'),
    '#required' => TRUE,
  );

  $form['author_taxonomy_replace_submitted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Replace post information provided by your theme'),
    '#default_value' => variable_get('author_taxonomy_replace_submitted', TRUE),
    '#description' => t('Check this box if you want to automatically display Author Taxonomy\'s author and timestamp info above each node\'s body text <em>instead of</em> your theme\'s default output. You can enable which content types display post information on the <a href="@themes">themes configuration page</a>. If you uncheck this box, you must manually add the following line to your theme\'s node.tpl.php file wherever you want this information to appear: <strong>!code</strong>.', array(
      '@themes' => url('admin/build/themes/settings'),
      '!code' => '&lt;?php print author_taxonomy_output($node); ?&gt;',
    )),
  );

  $form['author_taxonomy_remove_terms'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove author names from each node\'s list of terms'),
    '#default_value' => variable_get('author_taxonomy_remove_terms', TRUE),
    '#description' => t('Many themes display all of the taxonomy terms associated with a node. Checking this box prevents author names from being displayed alongside a node\'s other terms.'),
  );

  $form['author_taxonomy_overwrite_author'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overwrite "real" node author'),
    '#default_value' => variable_get('author_taxonomy_overwrite_author', FALSE),
    '#description' => t('Check this box to overwrite the "Authored by:" field of the node with the author taxonomy term if a matching user is found. If a match isn\'t found, the field will remain unchanged. If you allow multiple authors terms per node (i.e., "Tags" or "Multiple select" is enabled for the author vocabulary), the module will try each author term in weighted or alphabetical order and assign the first matching user.'),
  );
  
  $form['author_taxonomy_auto_add'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically add username to author list'),
    '#default_value' => variable_get('author_taxonomy_auto_add', FALSE),
    '#description' => t('Check this box to automatically add the posting user\'s username to the author list when creating a node. \'Tags\' must be enabled for the author taxonomy selected above.'),
  );

  $form['linking'] = array(
    '#type' => 'fieldset',
    '#title' => t('Author linking options'),
    '#description' => t('Choose how you would like to display each author\'s name.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
    $form['linking']['author_taxonomy_link_authors'] = array(
      '#type' => 'radios',
      '#default_value' => variable_get('author_taxonomy_link_authors', 1),
      '#options' => array(t('Display authors\' names without links'), t('Display authors\' names as links to their taxonomy pages'), t('Display authors\' names as links to their user profile pages')  ),
    );  
  
  $form['timestamp'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timestamp display options'),
    '#description' => t('Customize or disable the display of the timestamp (node creation time and date).'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

    $form['timestamp']['author_taxonomy_timestamp_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display timestamp'),
      '#default_value' => variable_get('author_taxonomy_timestamp_display', TRUE),
      '#description' => t('Checking this box will display the timestamp. If you turn it off, you can ignore the other timestamp-related settings below.'),
    );

    $form['timestamp']['author_taxonomy_timestamp_type'] = array(
      '#type' => 'select',
      '#title' => t('Date output type'),
      '#options' => $date_formats,
      '#default_value' => variable_get('author_taxonomy_timestamp_type', array('medium')),
      '#description' => t('These options are defined on the <a href="@date_and_time">date and time settings page</a>. If you choose "Custom," remember to enter the custom string below.', array('@date_and_time' => url('admin/settings/date-time'))),
    );

    $form['timestamp']['author_taxonomy_timestamp_format'] = array(
      '#type' => 'textfield',
      '#title' => t('Custom date format'),
      '#description' => t('Enter a custom date string using <a href="@date_function">PHP\'s date() function</a> notation. Note: The "Custom" format must be selected above.', array('@date_function' => url('http://www.php.net/date'))),
      '#default_value' => variable_get('author_taxonomy_timestamp_format', 'j F Y'),
      '#maxlength' => 100,
      '#size' => 20,
    );

  $form['#submit'][] = 'author_taxonomy_admin_settings_submit';

  return system_settings_form($form);
}


function author_taxonomy_admin_settings_submit ($form, &$form_state) {
  if ($form['author_taxonomy_vocab']['#default_value'] != $form['author_taxonomy_vocab']['#value']) {
    // changed taxonomy, clear the user links table
    db_query('DELETE FROM {author_taxonomy_term_link}');
  }
}

/**
 * Implementation of hook_requirements
 */
function author_taxonomy_requirements($phase) {
  $requirements = array();
  
  if ($phase == 'runtime') {
    $default_vocab = variable_get('author_taxonomy_vocab', 0);
    if (!$default_vocab) {
      $requirements['author_taxonomy_vocab'] = array(
        'title' => t('Author Taxonomy'),
        'value' => t('Taxonomy not set'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('The Author Taxonomy module must have a taxonomy assigned to function properly.<br> Please visit the <a href="!url">Author Taxonomy settings page</a> and assign a taxonomy.', array('!url' => url('admin/settings/author_taxonomy'))),
      );
    }
  }
  
  return $requirements;
}



/**
 * Creates array of authors' names and prepares output for the theme functions.
 */
function author_taxonomy_output($node) {
  $author_tids = taxonomy_node_get_terms_by_vocabulary($node, variable_get('author_taxonomy_vocab', 0));
  $author_names = array();
  $author_links = variable_get('author_taxonomy_link_authors', 1);

  if (!empty($author_tids)) {
    foreach ($author_tids as $tid => $term) {
      switch ($author_links) {
        case 1:
          // links to taxonomy pages
          $author_names[] = l($term->name, taxonomy_term_path($term), array('title' => t('See all stories by @author', array('@author' => $term->name))));
          break;
        case 2:
          // links to user profile pages
          $uid = FALSE;
          $uid = db_result(db_query('SELECT uid FROM {author_taxonomy_term_link} WHERE tid = %d', $tid));
          
          if ($uid) {
            $name = l($term->name, 'user/' . $uid, array('title' => t('Go to @author\'s profile page', array('@author' => $term->name))));
          } else {
            $name = $term->name;
          }
          
          $author_names[] = $name;
          break;
        default:
          // display authors' names without links
          $author_names[] = $term->name;
      }
    }
  }

  $show_timestamp = variable_get('author_taxonomy_timestamp_display', TRUE);
  $replace_submitted = variable_get('author_taxonomy_replace_submitted', TRUE);

  return theme('author_taxonomy_output', $node, $author_names, $show_timestamp, $replace_submitted);
}

/**
 * Implementation of hook_user().
 * Deletes entries from the db if a user is deleted
 */
function author_taxonomy_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    // deleting user, so delete any author_taxonomy links
    db_query('DELETE FROM {author_taxonomy_term_link} WHERE uid = %d', $account->uid);
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function author_taxonomy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {

    case 'presave' :
      // Is "overwrite author" option enabled?
      $overwrite_author = variable_get('author_taxonomy_overwrite_author', FALSE);
      if ($overwrite_author) {
        taxonomy_node_save($node, $node->taxonomy);
        $author_terms = _author_taxonomy_get_author_terms($node->vid);

        if (!empty($author_terms)) {
          // If there is more than one author term, sort them by weight and alpha
          if (count($author_terms) > 1) {
            usort($author_terms, '_author_taxonomy_sort_terms');
          }

          // Try to find a match in the users table. Iterate through each author term until a match is found.
          foreach ($author_terms as $author_term) {
            $user = db_fetch_array(db_query("SELECT uid, name FROM {users} WHERE name = '%s'", $author_term->name));

            // If a match exists, change node author's uid and name
            if (!empty($user)) {
              $node->uid = $user['uid'];
              $node->name = $user['name'];
              break;
            }
          }
        }
      }
      break;

  }
}

/**
 * Implementation of hook_form_alter()
 */
function author_taxonomy_form_alter(&$form, $form_state, $form_id) {
  // make sure this is a 'node' form first
  if ( isset($form['type']) && isset($form['#node']) && ($form['type']['#value'] .'_node_form' == $form_id) )
  {
    global $user;
  
    $vid = variable_get('author_taxonomy_vocab', 0);
    $taxonomy = taxonomy_vocabulary_load($vid);
  
    if ($taxonomy->tags == '1') {
      if (!$form['taxonomy']['tags'][$vid]['#default_value'] && variable_get('author_taxonomy_auto_add', FALSE)) {
        $form['taxonomy']['tags'][$vid]['#default_value'] = $user->name;
      }
    }
  }
}


/**
 * Implementation of hook_form_alter(), specific to the taxonomy term edit form.
 */
function author_taxonomy_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (!$form_state['rebuild'] && ($form['vid']['#value'] == variable_get('author_taxonomy_vocab', 0)) ) {
    $form['author_taxonomy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Author Taxonomy'),
      '#description' => t('Link a User to this term'),
      '#weight' => 1,
    );
    
    $result = db_query('SELECT uid, name FROM {users} order by name');
    
    $options = array();
    while ($user = db_fetch_object($result)) {
      $options[$user->uid] = $user->name;
    }

    $default = array();
    $default['uid'] = db_result(db_query('SELECT uid FROM {author_taxonomy_term_link} WHERE tid = %d', $form['tid']['#value']));
    if ($default['uid']) {
      $form['author_taxonomy_update'] = array('#type' => 'value', '#value' => TRUE);
    } else {
      $form['author_taxonomy_update'] = array('#type' => 'value', '#value' => FALSE);
      $default = '';
    }
    $default['name'] = user_load($default['uid']);
    $default['name'] = $default['name']->name;
    
    $form['author_taxonomy']['term_user'] = array(
      '#type' => 'textfield',
      '#title' => t('User name'),
      '#description' => t('This is an auto-complete field. Begin typing the user name, and a list of matching names will appear for you to select from.'),
      '#default_value' => ($default['uid'] ? $default['name'] . ' [user id:' . $default['uid'] . ']' : ''),
      '#autocomplete_path' => 'admin/settings/author_taxonomy/autocomplete',
    );
    
    
    $form['submit']['#weight'] = 9;
    $form['delete']['#weight'] = 9;
  }
}


/**
 * Implementation of hook_taxonomy().
 */
function author_taxonomy_taxonomy($op, $type, $array = NULL) {
  if ( ($op == 'delete') && ($type == 'vocabulary') && ($array['vid'] == variable_get('author_taxonomy_vocab', 0)) ) {
    // deleting vocab, so delete all author_taxonomy links
    db_query('DELETE FROM {author_taxonomy_term_link}');
    variable_del('author_taxonomy_vocab');
    return;
  }
  
  if ( (($op == 'update') || ($op == 'insert')) && ($type == 'term') && ($array['vid'] == variable_get('author_taxonomy_vocab', 0)) ) {
    // updating term
    $uid = author_taxonomy_get_uid($array['term_user']);

    if ($uid != 0) {
      $record = array('tid' => $array['tid'], 'uid' => $uid, 'link_type' => 0);
      if ($array['author_taxonomy_update']) {
        // update existing entry
        $success = drupal_write_record('author_taxonomy_term_link', $record, 'tid');
      } else {
        // insert new entry
        $success = drupal_write_record('author_taxonomy_term_link', $record);
      }
    } else {
      if ($array['author_taxonomy_update']) {
        // remove link from existing entry
        db_query('DELETE FROM {author_taxonomy_term_link} WHERE tid = %d', $array['tid']);
      }
    }
    
    return;
  }
  
  if ( ($op == 'delete') && ($type == 'term')  && ($array['vid'] == variable_get('author_taxonomy_vocab', 0))  ) {
    // deleting term, so delete any author_taxonomy links
    db_query('DELETE FROM {author_taxonomy_term_link} WHERE tid = %d', $array['tid']);
  }
}


/**
 * Retrieve the terms for the given node version ID.
 *
 * @param $vid int
 *  The node version ID to get terms for.
 *
 * @return array
 *  The term objects for the given node ID.
 */
function _author_taxonomy_get_author_terms($vid) {
  $result = db_query('SELECT tid FROM {term_node} WHERE vid = %d', $vid);
  $vocab_vid = variable_get('author_taxonomy_vocab', 0);
  $tids = array();
  $author_terms  = array();

  while ($row = db_fetch_array($result)) {
    $tids[] = $row['tid'];
  }

  foreach ($tids as $tid) {
    $term = taxonomy_get_term($tid);
    if ($term->vid == $vocab_vid) {
      $author_terms[] = $term;
    }
  }

  return $author_terms;
}


/**
 * Compare two terms first by weight, then by name.
 *
 * @param $left_term object A term object.
 * @param $right_term object A term object.
 *
 * @return int an integer less than, equal to, or greater than zero if
 *         the left term is considered to be respectively less than,
 *         equal to, or greater than the right term.
 */
function _author_taxonomy_sort_terms($left_term, $right_term) {
  $result = 0;

  if ($left_term->weight < $right_term->weight) {
    $result = -1;
  }
  else if ($left_term->weight > $right_term->weight) {
    $result = 1;
  }
  else {
    $result = strcasecmp($left_term->name, $right_term->name);
  }

  return $result;
}


/**
 * Implementation of template_preprocess_node().
 * 
 * Intercept and change value of node's $submitted variable if 
 * "Replace post information provided by your theme" is checked
 */
function author_taxonomy_preprocess_node(&$variables) {
  $node = $variables['node'];

  if (theme_get_setting('toggle_node_info_'. $node->type) && variable_get('author_taxonomy_replace_submitted', TRUE)) {
    $variables['submitted'] = author_taxonomy_output($node);
  }

  if (variable_get('author_taxonomy_remove_terms', TRUE)) {
    $variables['taxonomy'] = author_taxonomy_link('taxonomy terms', $node);
    $variables['terms'] = theme('author_taxonomy_terms', $variables['taxonomy']);
  }

  return $variables;
}


/**
 * Implementation of hook_link().
 * 
 * This is copied from taxonomy.module's hook_link(). Changes
 * (marked as "ADDED") check if the term's VID matched the author
 * vocabulary's VID
 * 
 * Original code:
 * http://api.drupal.org/api/function/taxonomy_link/6
 */
function author_taxonomy_link($type, $node = NULL) {
  if ($type == 'taxonomy terms' && $node != NULL) {
    $links = array();

    if (!empty($node->taxonomy)) {
      // ADDED: Get the author taxonomy VID
      $author_vid = variable_get('author_taxonomy_vocab', 0);

      foreach ($node->taxonomy as $term) {
        // ADDED: Check if the term is a member of the author vocabulary
        if ($term->vid != $author_vid) {

          // During preview the free tagging terms are in an array unlike the
          // other terms which are objects. So we have to check if a $term
          // is an object or not.
          if (is_object($term)) {
            $links['taxonomy_term_'. $term->tid] = array(
              'title' => $term->name,
              'href' => taxonomy_term_path($term),
              'attributes' => array('rel' => 'tag', 'title' => strip_tags($term->description))
            );
          }
          // Previewing free tagging terms; we don't link them because the
          // term-page might not exist yet.
          else {
            foreach ($term as $free_typed) {
              $typed_terms = drupal_explode_tags($free_typed);
              foreach ($typed_terms as $typed_term) {
                $links['taxonomy_preview_term_'. $typed_term] = array(
                  'title' => $typed_term,
                );
              }
            }
          }
        }
      }
    }

    // We call this hook again because some modules and themes
    // call taxonomy_link('taxonomy terms') directly.
    drupal_alter('link', $links, $node);

    return $links;
  }
}


/**
 * Provide user-lookup autocompletion.
 *
 * @param string $string 
 */
function author_taxonomy_autocomplete($string = '') {
  $matches = array();

  if ($string) {
    $string = strtolower($string);
    $result = db_query_range("SELECT `uid`, `name` FROM {users}
                              WHERE LOWER(`name`) LIKE LOWER('%s%%') and status = 1", $string, 0, 10);
    
    while ($user = db_fetch_object($result)) {
      $key = sprintf('%s [user id: %d]', check_plain($user->name), $user->uid);
      $matches[$key] = check_plain($user->name);
   }
  }
  
  print drupal_to_js($matches);
  exit();
}


/**
 * Return uid based on string created by autocomplete function
 */
function author_taxonomy_get_uid($string = '') {
  $uid = 0;
  //extract the uid from the submitted name+uid
  $match = preg_match('/id\: (\d+)/', $string, $preg_matches);
  
  if ($match) {
    $uid = $preg_matches[1];
  }  
  
  return $uid;
}


/**
 * Implementation of hook_theme().
 */
function author_taxonomy_theme($existing, $type, $theme, $path) {
  return array(
    'author_taxonomy_output' => array(
      'arguments' => array(
        'node' => NULL,
        'author_names' => NULL,
        'show_timestamp' => TRUE,
        'replace_submitted' => FALSE,
      ),
    ),
    'author_taxonomy_authors' => array(
      'arguments' => array(
        'author_names' => NULL,
      ),
    ),
    'author_taxonomy_timestamp' => array(
      'arguments' => array(
        'timestamp' => NULL,
      ),
    ),
    'author_taxonomy_terms' => array(
      'arguments' => array(
        'taxonomy' => NULL,
      ),
    ),
  );
}


/**
 * Returns div containing authors and timestamp (themeable).
 */
function theme_author_taxonomy_output($node, $author_names, $show_timestamp = TRUE, $replace_submitted = FALSE) {
  $output = '';

  if ($show_timestamp) {
    // Print timestamp
    $output .= '<span class="timestamp">'. theme('author_taxonomy_timestamp', $node->created) .'</span>';
  }

  if ($show_timestamp && !empty($author_names)) {
    // Print separator
    $output .= ' | ';
  }

  if (!empty($author_names)) {
    // Print authors
    $output .= '<span class="authors">'. theme('author_taxonomy_authors', $author_names) .'</span>';
  }

  // If this call to theme_author_taxonomy_output is *not* supposed to replace
  // the theme's $submitted value, wrap it in a div
  if (!$replace_submitted) {
    $output = '<div class="submitted">'. $output .'</div>';
  }

  return $output;
}


/**
 * Returns serialized list of authors' names (themeable).
 */
function theme_author_taxonomy_authors($author_names) {
  $output = '';
  $author_count = count($author_names);

  switch ($author_count) {
    case 0 : // No authors (theme_author_taxonomy_output() should have caught this)
      break;

    case 1 : // One author (output: "Name1")
      $output .= implode('', $author_names);
      break;

    case 2 : // Two authors (output: "Name1 and Name2")
      $output .= implode(t(' and '), $author_names);
      break;

    default : // More than two authors (output: "Name1, Name2, and Name3")
      $i = 1;
      foreach ($author_names as $author_name) {
        // If this is the last author
        if ($i == $author_count) {
          $output .= t('and ') . $author_name;
        }
        else {
          $output .= $author_name .', ';
        }
        $i++;
      }
      break;
  }

  return $output;
}


/**
 * Returns the timestamp in the format chosen on the admin settings page (themeable).
 */
function theme_author_taxonomy_timestamp($timestamp) {
  $type = variable_get('author_taxonomy_timestamp_type', array('medium'));
  $format = variable_get('author_taxonomy_timestamp_format', 'j F Y');

  return format_date($timestamp, $type, $format);
}


/**
 * Returns the node's taxonomy terms in the same manner as the PHPTemplate engine.
 * 
 * This function is called only if "Remove author names from each node's list of
 * terms" is checked. In this case, author names have already been removed from
 * the $taxonomy array
 */
function theme_author_taxonomy_terms($taxonomy) {
  return theme('links', $taxonomy, array('class' => 'links inline'));
}

<?php
// $Id: user_terms.module,v 1.1 2009/06/05 20:57:11 toddnienkerk Exp $

/**
 * @file
 *   Provides a simple means of associating a user with taxonomy terms.
 */


/**
 * Implementation of hook_menu().
 */
function user_terms_menu() {
  $items = array();

  $items['admin/user/userterms'] = array(
    'title'           => t('User Terms settings'),
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('user_terms_settings'),
    'access callback' => user_access('administer users'),
    'type'            => MENU_NORMAL_ITEM,
    'description'     => t('Configure user terms vocabulary settings.'),
  );

  return $items;
}


/**
 * Implementation of hook_user().
 */
function user_terms_user($op, &$edit, &$account, $category = NULL) {
  // Should user terms be displayed in the interface?
  $display = TRUE;
  if (function_exists('profile_categories')) {
    $profile_page = variable_get('user_terms_profile_path', 0);
    if ($category && ($category != $profile_page)) {
      $display = FALSE;
    }
  }

  switch ($op) {

    // The user account is being loaded.
    case 'load':
      return user_terms_load_profile($account);

    // The user account registration form is about to be displayed. The module should present the form elements it wishes to inject into the form.
    case 'register':
      return $display ? user_terms_form_profile($edit, $account, $category, TRUE) : '';

    // The user account is being added. The module should save its custom additions to the user object into the database and set the saved fields to NULL in $edit.
    case 'insert':
      user_terms_save_profile($edit, $account, $category, TRUE);
      break;

    // The user's account information is being displayed. The module should format its custom additions for display, and add them to the $account->content array.
    case 'view':
      return user_terms_view_profile($account);

    // The user account edit form is about to be displayed. The module should present the form elements it wishes to inject into the form.
    case 'form':
      return $display ? user_terms_form_profile($edit, $account, $category) : '';

/*
    // The user account is about to be modified. The module should validate its custom additions to the user object, registering errors as necessary.
    case 'validate':
      return profile_validate_profile($edit, $category);
*/

    // The user account is being changed. The module should save its custom additions to the user object into the database and set the saved fields to NULL in $edit.
    // TODO: This method doesn't seem to work because it's stored on a page generated by profile.module
    case 'update':
      return $display ? user_terms_save_profile($edit, $account, $category) : '';

    // The user account is being deleted. The module should remove its custom additions to the user object from the database. 
    case 'delete':
      db_query('DELETE FROM {term_user} WHERE uid = %d', $account->uid);
  }
}


/**
 * Load the user's profile.
 *
 * @param &$account
 *   The account from which data is loaded.
 */
function user_terms_load_profile(&$account) {
  $terms  = array();
  $query = "SELECT u.tid, t.vid, t.name FROM {term_user} u 
              INNER JOIN {term_data} t ON t.tid = u.tid 
              WHERE u.uid = %d";
  $result = db_query($query, $account->uid);

  while ($row = db_fetch_object($result)) {
    $terms[$row->tid] = array(
      'tid'  => $row->tid,
      'vid'  => $row->vid,
      'name' => $row->name,
    );
  }

  $account->user_terms = $terms;
}


/**
 * View the user's profile.
 *
 * @param &$account
 *   The account from which data is loaded and displayed.
 */
function user_terms_view_profile(&$account) {
  $vid = variable_get('user_terms_vocabulary', -1);
  $terms = $account->user_terms;

  // Skip everything if no user term vocabulary is selected or if this user has
  // no terms selected
  if (($vid != -1) && !empty($terms)) {
    $vocab_title = variable_get('user_terms_title', $vocab->name);
  
    $account->content['user_terms'] = array(
      '#type' => 'user_profile_category',
      '#title' => $vocab_title,
      '#weight' => 4,
    );
  
    // TODO: Reformat the output into an item-list array
    foreach ($terms as $tid => $data) {
      $account->content['user_terms'][$tid] = array(
        '#value' => $data['name'],
        '#suffix' => '<br/>',
      );
    }
  }
}


/**
 * Edit a user's profile or register a new account.
 *
 * @param &$account
 *   The account from which data is loaded and displayed.
 */
function user_terms_form_profile($edit, $account, $category, $register = FALSE) {
  $form  = array();
  $vid = variable_get('user_terms_vocabulary', -1);

  // Skip everything if no user term vocabulary is selected.
  if ($vid != -1) {

    $default = NULL;
    if (!$register) {
      $user  = user_load(array('uid' =>  $account->uid));
      $default = empty($user->user_terms) ? array() : array_keys($user->user_terms);
    }

    $vocab = taxonomy_vocabulary_load($vid);
    $vocab_title = variable_get('user_terms_title', $vocab->name);
    $vocab_desc  = variable_get('user_terms_description', $vocab->description);

    $form['user_terms'] = array(
      '#type'        => 'fieldset',
      '#title'       => $vocab_title,
      '#description' => $vocab_desc,
    );
      $form['user_terms']['user_terms'] = array(
        '#type'     => 'select',
        '#multiple' => TRUE,
        '#title'    => $vocab_title,
        '#options'  => _user_terms_term_select_options($vid),
        '#default_value' => $default,
      );
  }

  return $form;
}


/**
 * Build an array of options to use in a select box.
 *
 * @param $vocabulary_id 
 */
function _user_terms_term_select_options($vocabulary_id) {
  $tree = taxonomy_get_tree($vocabulary_id);
  $options = array();

  if ($tree) {
    foreach ($tree as $term) {
      $choice = new stdClass();
      $choice->option = array($term->tid => str_repeat('-', $term->depth) . $term->name);
      $options[] = $choice;
    }
  }

  return $options;
}


function user_terms_save_profile(&$edit, &$account, $category, $register = FALSE) {
  // Clear existing if not inserting.
  if (!$register) {
    $query = "DELETE FROM {term_user} WHERE uid = %d";
    db_query($query, $account->uid);
  }

  // Persist the new data.
  $query = "INSERT IGNORE INTO {term_user} (uid, tid) VALUES (%d, %d)";

  foreach ($edit['user_terms'] as $tid) {
    db_query($query, $account->uid, $tid);
  }

  $edit['user_terms'] = NULL;
}


/**
 * The admin form for choosing the vocabulary to associate users with.
 *
 * @return array
 *   The form elements.
 */
function user_terms_settings() {
  $form    = array();
  $vocabs  = taxonomy_get_vocabularies();
  $options = array(
    -1 => t('None'),
  );

  foreach ($vocabs as $vid => $voc) {
    $options[$vid] = $voc->name;
  }

  $description = t('Chose the vocabulary that will be used to tag users.');

  $form['user_terms_vocabulary'] = array(
    '#type'          => 'select',
    '#title'         => t('User Vocabulary'),
    '#options'       => $options,
    '#description'   => $description,
    '#default_value' => variable_get('user_terms_vocabulary', -1),
  );

  $description = t('When the terms are presented to the user for selection, this text will be used to label the form elements for selecting those terms. For example, for selecting user hobbies, this might be "Hobbies".');
  $form['user_terms_title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Vocabulary Display Title'),
    '#default_value' => variable_get('user_terms_title', ''),
    '#description'   => $description,
    '#size'          => 32,
  );

  $description = t('This description will be displayed with the terms on the user profile page and should provide an explanation to the user what these terms are for.');
  $form['user_terms_description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Vocabulary Explanation'),
    '#description'   => $description,
    '#default_value' => variable_get('user_terms_description', ''),
  );

  // Only add this option if the profile module is enabled.
  if (function_exists('profile_categories')) {
    $data    = profile_categories();
    $options = array(
      0 => t('[main account]'),
    );

    foreach($data as $datum) {
      $options[$datum['name']] = $datum['name'];
    }

    $description = t('The path to the profile tab page that the vocabulary should appear on when the user is editing their profile.');
    $form['user_terms_profile_path'] = array(
      '#type'    => 'select',
      '#title'   => t('Profile Page'),
      '#options' => $options,
      '#default_value' => variable_get('user_terms_profile_path', 0),
    );
  }

  return system_settings_form($form);
}

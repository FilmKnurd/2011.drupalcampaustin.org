<?php

/**
 * Implementation of hook_block().
 */
function drupalcampaustin_library_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['dca_header_links'] = array(
      'info' => t('DCA: Header links'),
    );
    $blocks['dca_header_ribbon'] = array(
      'info' => t('DCA: Header ribbon'),
    );
    $blocks['dca_user_stats'] = array(
      'info' => t('DCA: User stats'),
    );
    return $blocks;
  }
  else if ($op == 'view') {
    global $user;
    $user_loaded = user_load($user->uid);

    switch($delta) {
      case 'dca_header_links':
        $block = array(
          'subject' => '',
          'content' => drupalcampaustin_library_block_header_links($user_loaded),
        );
        break;
      case 'dca_header_ribbon':
        $block = array(
          'subject' => '',
          'content' => drupalcampaustin_library_block_header_ribbon($user_loaded),
        );
        break;
      case 'dca_user_stats':
        $block = array(
          'subject' => 'User stats',
          'content' => drupalcampaustin_library_block_user_stats($user_loaded),
        );
        break;
    }
    return $block;
  }
}

function drupalcampaustin_library_block_header_links($user) {
  $links = array();

  // Is the user logged in?
  if ($user->uid != 0) {
    $links[] = l(t('My account'), 'user/' . $user->uid);

    // Has the user created a profile page?
    if (!empty($user->profile)) {
      // See drupal_get_destination() if we want to add a destination query
      // http://api.drupal.org/api/function/drupal_get_destination/6
      $links[] = l(t('My profile page'), 'node/' . $user->profile->nid);
    }
    else {
      $links[] = l(t('Create my profile page'), 'node/add/profile');
    }

    // Add a "cart" link if the user is mid-checkout
    $cart = uc_cart_get_contents();
    if (!empty($cart)) {
      $links[] = l(t('My cart'), 'cart');
    }

    $links[] = l(t('Log out'), 'logout');
  }
  else {
    $links[] = l(t('Log in'), 'user/login');
    $links[] = l(t('Register'), 'user/register');
  }

  $output = '';
  $output .= '<div id="header-links">';
  $output .= '<div id="header-links-right"></div>';
  $output .= '<div id="header-links-text">';
  $output .= implode(' <span>|</span> ', $links);
  $output .= '</div>';
  $output .= '<div id="header-links-left"></div>';
  $output .= '</div>';

  return $output;
}

function drupalcampaustin_library_block_header_ribbon($user) {
  $path = '/' . drupal_get_path('theme', 'drupalcampaustin') . '/images/';

  $output = '';
  $output .= '<div id="header-ribbon">';

  // Is the user logged in?
  if ($user->uid != 0) {

    // See all to FALSE
    $profile_exists = FALSE;
    $registered = FALSE;
    // Has the user created a profile page?
    if (!empty($user->profile)) {
      $profile_exists = TRUE;
    }
    // Has the user registered?
    if (drupalcampaustin_library_user_has_role('attendee', $user)) {
      $registered = TRUE;
    }

    // Has the user finished everything?
    if ($profile_exists && $registered) {
      $output .= '<img src="' . $path . 'header-ribbon-done.png" class="steps" alt="You\'re done!" />';
    }
    else {
      $output .= '<img src="' . $path . 'header-ribbon-step1-done.png" class="steps" alt="Create account: Done!" />';

      // Has the user created a profile page?
      if ($profile_exists) {
        $output .= '<img src="' . $path . 'header-ribbon-step2-done.png" class="steps" alt="Create profile: Done!" />';
      }
      else {
        $output .= '<a href="/node/add/profile" title="Create profile"><img src="' . $path . 'header-ribbon-step2.png" class="steps" alt="Create profile" /></a>';
      }

      // Has the user registered?
      if ($registered) {
        $output .= '<img src="' . $path . 'header-ribbon-step3-done.png" alt="Registration: Done!" />';
      }
      else {
        $output .= '<a href="/products/drupalcamp-austin-2009-registration" title="Register"><img src="' . $path . 'header-ribbon-step3.png" alt="Register" /></a>';
        
        // Add a persistent message reminding users to register
        $path = $_GET['q'];

        // Show a helpful reminder message on most pages
        // node/2 == Product page
        // cart == Any shopping cart page
        if (($path != 'node/add/profile') && ($path != 'node/2') && (arg(0) != 'cart')) {
          drupal_set_message(t('<strong>Don\'t forget to !register!</strong>', array('!register' => l(t('register to attend DrupalCamp Austin 2009'), 'products/drupalcamp-austin-2009-registration'), )));
        }
      }
    }
  }
  else {
    $output .= '<a href="/user/register" title="Register"><img src="' . $path . 'header-ribbon-register.png" alt="Register" /></a>';
  }

  $output .= '</div>';

  return $output;
}

function drupalcampaustin_library_block_user_stats($user) {
  $display_views = array(
    'users_registered',
    'users_registered_free',
    'users_vegetarian',
    'users_vegan',
  );

  $output = array();

  foreach ($display_views as $display_view) {
    $view = views_get_view($display_view);
    if (!empty($view)) {
      // Execute view query
      // Results will be stored as an array in $view->result
      $view->execute_display('default');
      $output[] = $view->display['default']->display_options['title'] . ': ' . count($view->result);
    }
  }

  return implode('<br />', $output);
}

/**
 * Implementation of hook_user().
 */
function drupalcampaustin_library_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      $account->profile = drupalcampaustin_library_user_profile($account->uid);
      break;

    case 'view':
      $account->content['summary']['#title'] = t('Account summary');
      $account->content['summary']['#weight'] = -10;
      $account->content['summary']['user_profile'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Profile page'),
        '#value' => drupalcampaustin_library_user_account_page($account->uid),
      );
      break;
  }
}

function drupalcampaustin_library_user_profile($uid) {
  $profile = content_profile_load('profile', $uid);
  if ($profile != FALSE) {
    return $profile;
  }
  return NULL;
}

function drupalcampaustin_library_user_account_page($uid) {
  global $user;

  $profile = drupalcampaustin_library_user_profile($uid);
  $output = '';

  // Is the user viewing his/her own account page?
  if ($user->uid == $uid) {
    if (!empty($profile)) {
      $output = l(t('View my profile page'), 'node/' . $profile->nid);
      $output .= '<br />';
      $output .= l(t('Edit my profile page'), 'node/' . $profile->nid . '/edit');
    }
    else {
      $output = l(t('Create my profile page'), 'node/add/profile');
    }
  }
  elseif (!empty($profile)) {
    $output = l(t('Go to this user\'s profile page'), 'node/' . $profile->nid);
  }
  else {
    $output = t('This user has not created a profile page');
  }

  return $output;
}

/**
 * Check to see if a user has been assigned a certain role.
 *
 * @param $role
 *   The name of the role you're trying to find.
 * @param $user
 *   The user object for the user you're checking; defaults to the current user.
 * @return
 *   TRUE if the user object has the role, FALSE if it does not.
 */
function drupalcampaustin_library_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_form_alter().
 */
function drupalcampaustin_library_form_alter(&$form, $form_state, $form_id) {
//  print $form_id;

  // Content Profile wants to redirect the form to the user's account page.
  // This has to be done here (instead of hook_form_FORM_ID_alter()) below
  // because Content Profile uses form_alter(), which runs *after* the
  // FORM_ID version.
  if (($form_id == 'profile_node_form') && ($form['#action'] == '/node/add/profile')) {
    $form['#redirect'] = 'products/drupalcamp-austin-2009-registration';
  }
}

function drupalcampaustin_library_form_comment_form_alter(&$form, &$form_state) {
  unset($form['_author']);
  unset($form['comment_filter']['comment']['#title']);
  unset($form['preview']);
}

function drupalcampaustin_library_form_contact_mail_user_alter(&$form, &$form_state) {
  $profile = drupalcampaustin_library_user_profile(arg(1));
  if (!empty($profile)) {
    $form['#redirect'] = 'node/' . $profile->nid;
  }
  else {
    $form['#redirect'] = '<front>';
  }
}

function drupalcampaustin_library_form_uc_cart_view_form_alter(&$form, &$form_state) {
  unset($form['update']);
//  unset($form['items'][0]['remove']);
  unset($form['items'][0]['image']);
//  unset($form['items']['#columns']['remove']);
  unset($form['items']['#columns']['image']);

  $form['items']['#columns']['desc']['cell'] = 'Description';
}

function drupalcampaustin_library_form_profile_node_form_alter(&$form, &$form_state) {
  // Hide the extraneous title ("Name") field
  $form['title']['#type'] = 'hidden';
  // Add placeholder for #value
  $form['title']['#value'] = NULL;
  // Add a validation function that will fill in the value of the title ("Name") field
  $form['#validate'][] = 'drupalcampaustin_library_profile_node_form_validate';

  $form['revision_information']['#type'] = 'hidden';
}

function drupalcampaustin_library_profile_node_form_validate($form, &$form_state) {
  $name = $form_state['values']['field_profile_firstname'][0]['value'] . ' ' . $form_state['values']['field_profile_lastname'][0]['value'];
  form_set_value($form['title'], $name, $form_state);
}

function drupalcampaustin_library_advforum_styles() {
  $items = array();
  $items['drupalcampaustin'] = array(
    'directory' => '../../themes/drupalcampaustin/forum',
  );
  return $items;
}

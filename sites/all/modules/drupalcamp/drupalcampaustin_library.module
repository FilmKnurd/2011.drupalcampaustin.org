<?php

/*
 * Define constants.
 */
define('PRODUCT_ADMISSION_NID', 340);
define('PRODUCT_PARKING_NID', 342);
define('PARKING_OFFER_NID', 345);


/**
 * Implementation of hook_menu_alter().
 */
function drupalcampaustin_library_menu_alter(&$items) {
//  krumo($items);

  // Move /user/register to /register.
  $items['register'] = $items['user/register'];
  unset($items['user/register']);

  // Change the menu title.
  $items['register']['title'] = 'Register';
}


/**
 * Implementation of hook_block().
 */
function drupalcampaustin_library_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['dca_header_links'] = array(
      'info' => t('DCA: Header links'),
      'cache' => BLOCK_CACHE_PER_USER,
    );
    $blocks['dca_header_ribbon'] = array(
      'info' => t('DCA: Header ribbon'),
      'cache' => BLOCK_CACHE_PER_USER,
    );
    $blocks['dca_user_stats'] = array(
      'info' => t('DCA: User stats'),
      'cache' => BLOCK_CACHE_PER_USER,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    global $user;
    $user_loaded = user_load($user->uid);

    switch($delta) {
      case 'dca_header_links':
        $block = array(
          'subject' => '',
          'content' => drupalcampaustin_library_block_header_links($user_loaded),
          'cache' => BLOCK_CACHE_PER_USER,
        );
        break;
      case 'dca_header_ribbon':
        $block = array(
          'subject' => '',
          'content' => drupalcampaustin_library_block_header_ribbon($user_loaded),
          'cache' => BLOCK_CACHE_PER_USER,
        );
        break;
      case 'dca_user_stats':
        $block = array(
          'subject' => 'User stats',
          'content' => drupalcampaustin_library_block_user_stats($user_loaded),
          'cache' => BLOCK_CACHE_PER_USER,
        );
        break;
    }
    return $block;
  }
}


/*
 */
function drupalcampaustin_library_block_header_links($user) {
  $links = array();

  // Is the user logged in?
  if ($user->uid != 0) {
    $links[] = l(t('My account'), 'user/' . $user->uid);

    if (!$user->has_registered) {
      // Add a "cart" link if the user is mid-checkout
      $cart = uc_cart_get_contents();
      if (!empty($cart)) {
        $links[] = l(t('My cart'), 'cart');
      }
    }

    $links[] = l(t('Log out'), 'logout');
  }
  else {
    $links[] = l(t('Log in'), 'user/login');
    $links[] = l(t('Register'), 'register');
  }

  $output = '';
  $output .= '<div id="header-links">';
  $output .= implode('', $links);
  $output .= '</div>';

  return $output;
}


/*
 */
function drupalcampaustin_library_block_header_ribbon($user) {
  $path = '/' . drupal_get_path('theme', 'drupalcampaustin') . '/images/';

  $output = '';
  $output .= '<div id="header-ribbon">';

  // Is the user logged in?
  if ($user->uid != 0) {

    // Has the user registered?
    if ($user->has_registered) {
      $output .= '<img src="' . $path . 'register-done.png" class="steps" alt="' . t("You're done!") . '" />';
      $output .= l('<img src="' . $path . 'register-done-parking.png" class="steps" alt="' . t('Need parking?') . '" />', 'node/' . PRODUCT_PARKING_NID, array('html' => TRUE, 'attributes' => array('title' => t('Need parking?'))));
    }
    else {
      $output .= l('<img src="' . $path . 'register-almost-done.png" alt="' . t('Register') . '" />', 'node/' . PRODUCT_ADMISSION_NID, array('html' => TRUE, 'attributes' => array('title' => t('Register'))));

      // Add a persistent message reminding users to register
      // node/PRODUCT_ADMISSION_NID == Product page
      // cart == Any shopping cart page
      $path = $_GET['q'];
      $excluded_paths = array(
        'node/add/profile',
        'node/' . PRODUCT_ADMISSION_NID,
        'node/' . PRODUCT_PARKING_NID,
        'node/' . PARKING_OFFER_NID,
      );
      if (!in_array($path, $excluded_paths) && (arg(0) != 'cart')) {
        drupal_set_message(t("<strong>Don't forget to !purchase-admission!</strong>", array('!purchase-admission' => l(t('purchase admission to DrupalCamp Austin 2010'), 'node/' . PRODUCT_ADMISSION_NID), )));
      }
    }
  }
  else {
    $output .= l('<img src="' . $path . 'register.png" class="steps" alt="' . t('Register') . '" />', 'register', array('html' => TRUE, 'attributes' => array('title' => t('Register'), 'id' => 'register-button')));
  }

  $output .= '</div>';

  return $output;
}


/* */
function drupalcampaustin_library_block_user_stats($user) {
  $display_views = array(
    'internal_users_registered',
    'internal_users_registered_free',
    'internal_users_unregistered',
    // TODO: Add dietary and special needs views
  );

  $items = array();

  foreach ($display_views as $display_view) {
    $view = views_get_view($display_view);
    if (!empty($view)) {
      // Execute view query
      // Results will be stored as an array in $view->result
      $view->execute_display('default');
      $items[] = $view->display['default']->display_options['title'] . ': ' . count($view->result);
    }
  }

  return theme('item_list', $items);
}


/**
 * Implementation of hook_user().
 */
function drupalcampaustin_library_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      $account->profile = drupalcampaustin_library_user_profile($account->uid);

      // Has the user registered?
      if (drupalcampaustin_library_user_has_role('attendee', $account)) {
        $account->has_registered = TRUE;
      }
      else {
        $account->has_registered = FALSE;
      }
      break;
    case 'view':
      // Set title to the user's full name.
      drupal_set_title($account->profile->title);
      // Get rid of that stupid "Member since" section.
      unset($account->content['summary']);
      // Move profile to the top;
      $account->content['content_profile']['#weight'] = -10;
      break;
  }
}


/* */
function drupalcampaustin_library_user_profile($uid) {
  $profile = content_profile_load('profile', $uid);
  if ($profile != FALSE) {
    return $profile;
  }
  return NULL;
}


/**
 * Check to see if a user has been assigned a certain role.
 *
 * @param $role
 *   The name of the role you're trying to find.
 * @param $user
 *   The user object for the user you're checking; defaults to the current user.
 * @return
 *   TRUE if the user object has the role, FALSE if it does not.
 */
function drupalcampaustin_library_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implementation of hook_form_alter().
 */
function drupalcampaustin_library_form_alter(&$form, $form_state, $form_id) {
/*
  print $form_id;
  krumo($form);
*/

  // Is this a node editing form?
  if ($form_id == $form['type']['#value'] . '_node_form') {
    // Collapse the "Revision information" fieldset.
    if (user_access('administer nodes')) {
      $form['revision_information']['#collapsed'] = TRUE;
    }
    // Remove "Revision information" fieldset if the user doesn't have
    // "administer nodes" permission.
    else {
      $form['revision_information']['#access'] = FALSE;
    }

    // Make changes to the profile node form, which appears inside the
    // registration and account/profile editing forms.
    if ($form_id == 'profile_node_form') {
      // Get rid of the input format fieldset, which appears as the result of some bug.
      unset($form['body_field']);
    }
  }
  // Make the admission product node redirect to the parking info page.
  // The following has to be done here instead of hook_form_FORM_ID_alter()
  // because the NID stored in the constant may change.
  else if ($form_id == 'uc_product_add_to_cart_form_' . PRODUCT_ADMISSION_NID) {
    $form['#redirect'] = 'node/' . PARKING_OFFER_NID;
  }
  // Make changes to the user registration form.
  // The following has to be done here instead of hook_form_FORM_ID_alter()
  // because some form elements are only touchable here.
  else if ($form_id == 'user_register') {
    // Add a new wrapping fieldset.
    $form['group_account'] = array(
      '#type'  => 'fieldset',
      '#title' => t('Account information'),
    );

    // Copy account information fields to their own fieldset and unset them.
    $form['group_account']['name'] = $form['name'];
    $form['group_account']['mail'] = $form['mail'];
    $form['group_account']['pass'] = $form['pass'];
    $form['group_account']['timezone'] = $form['timezone'];
    unset($form['name']);
    unset($form['mail']);
    unset($form['pass']);
    unset($form['timezone']);
  }
}

function drupalcampaustin_library_form_user_register_alter(&$form, &$form_state) {
  // Rename the user registration page.
  drupal_set_title(t('Register for DrupalCamp Austin 2010'));
}

function drupalcampaustin_library_form_user_login_alter(&$form, &$form_state) {
  // Rename the log in page.
  drupal_set_title(t('Log in'));
}

function drupalcampaustin_library_form_user_pass_alter(&$form, &$form_state) {
  // Rename the password reset page.
  drupal_set_title(t('Request new password'));
}


/*
function drupalcampaustin_library_form_comment_form_alter(&$form, &$form_state) {
  unset($form['_author']);
  unset($form['comment_filter']['comment']['#title']);
  unset($form['preview']);
}
 */


/*
function drupalcampaustin_library_form_contact_mail_user_alter(&$form, &$form_state) {
  $profile = drupalcampaustin_library_user_profile(arg(1));
  if (!empty($profile)) {
    $form['#redirect'] = 'node/' . $profile->nid;
  }
  else {
    $form['#redirect'] = '<front>';
  }
}
 */


/*
function drupalcampaustin_library_form_uc_cart_view_form_alter(&$form, &$form_state) {
  unset($form['update']);
  unset($form['items'][0]['remove']);
  unset($form['items'][0]['image']);
  unset($form['items']['#columns']['remove']);
  unset($form['items']['#columns']['image']);

  $form['items']['#columns']['desc']['cell'] = 'Description';
}
 */
